
(**  
CommonHandlers - Handlers for the Common Functions used in test
@Version 1.0 23/08/2023 

"This software is copyright Keysight Technologies, Inc. and licensed under the terms of Keysight’s End User License Agreement. Terms of Keysight’s EULA may be found here: www.keysight.com/find/sweula By using this Software, you agree to the terms of the Keysight EULA."
**)


to textEntry input
	//to input the data into text box or text area
	typetext controlkey,"a"
	typetext input
	wait 0.3
end textEntry

to TextBox label, offset
	//to perform action on text box or text area
	put ImageLocation(text:label) into labelLocation
	click labelLocation + offset
end TextBox


to dropdown label,offset,input
	//to perform action on dropdown
	put ImageLocation(text:label) into labelLocation
	click labelLocation + offset
	wait 0.5
	typetext input,return
end dropdown

to radioButtons label, offset
	//to perform action on Checkboxes and radio buttons
	put ImageLocation(text:label) into labelLocation
	click labelLocation + offset
	wait 0.5
end radioButtons


to scrollforImgorText toFind
	//to scroll to the required area in web SUT
	
	moveto the center of RemoteScreenRectangle()
	if file (suiteinfo().imagesFolder&"/"&toFind&".png") exists
		repeat until imagefound(0,image:toFind)
			ScrollWheelDown 5
			wait 1
			if repeatindex() > 10 then 
				logerror "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
	else
		repeat until imagefound(waitfor:0,text:toFind,caseSensitive:Yes)
			ScrollWheelDown 5
			wait 1
			if repeatindex() > 10 then 
				logerror "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
	end if
	log "Element :" && toFind && "found at"&&FoundImageLocation()
	return FoundImageLocation()
	
end scrollforImgorText


to navigation action,Validation
	//to perform an action and  verify the content over screen
	click scrollforImgorText(action)
	wait 1
	if Validation is not empty
		if file (suiteinfo().imagesFolder&"/"&Validation&".png") exists
			log "imagefound"
			WaitFor 20, imagename:Validation
		else
			// OCR
			WaitFor 20, text:Validation,caseSensitive:Yes
			log "text found"
		end if
	end if
end navigation


to swipetoImgorText toFind
	//to swipe to the required area in mobile SUT
	set swipeSpeed to 7
	moveto the center of RemoteScreenRectangle()
	if file (suiteinfo().imagesFolder&"/"&toFind&".png") exists
		repeat until imagefound(1,image:toFind)
			SwipeUp 			
			wait 3
			if repeatindex() > 10 then 
				logerror "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
	else
		repeat until imagefound(waitfor:1,text:toFind,caseSensitive:Yes)
			SwipeUp
			wait 3
			if repeatindex() > 10 then 
				logerror "Cannot find"&&toFind
				Exit repeat
			end if
		end repeat
	end if
	log FoundImageLocation()
	return FoundImageLocation()
end swipetoImgorText

to verifyEvent verifyObject,successMsg,errorMsg	
	# to perform verify operation over application
	if file (suiteinfo().imagesFolder&"/"&verifyObject&".png") exists then
		if ImageFound(imagename:verifyObject, WaitFor:Universal pageWait) then Log successMsg else LogWarning errorMsg
	else
		if ImageFound(text:verifyObject, WaitFor:Universal pageWait) then Log successMsg else LogWarning errorMsg
	end if
end verifyEvent

to logoutapp
	//to logout from the application
	set the SearchRectangle to screen.ScreenPart("BottomLeftQuadrant")
	CommonHandlers.navigation "Icons/Logout2", "Log out @TAutothon"
	set the  SearchRectangle to []
	CommonHandlers.navigation "Log out @TAutothon", "Log out of X?"
	CommonHandlers.navigation "Log out","Happening now"
end logoutapp



(*to handle clickEvent action, validation
	click text:action
	if validation is not empty
		if file (suiteinfo().imagesFolder&"/"&validation&".png") exists
			
			log "imagefound"
			waitfor 20, imagename:validation
		else
			log "in else "
			waitfor 20, text:validation,caseSensitive:Yes
		end if
	end if
end clickEvent

to handle enterText input

	TypeText controlKey, "a"
	TypeText input
	
end enterText

to handle writeIn
	param input
	
	TypeText controlKey, "a"
	TypeText input
	
end enterText

to handle setProperties
	param styleType
	set the TextStyle to "Default"
	
	set properties to {
		Default:{contrast:"off"},
		ignoreSpacesUnderscores:{ignoreSpaces:true, ignoreUnderscores:true}
	}
	
	Try
		set the TextStyle to properties.(styleType)
	Catch theException
		throw styleType && "is not a recognized Style Properties."
		set the TextStyle to "Default"
	End try
	return the TextStyle
end setProperties*)


